// <auto-generated />
using System;
using DotnetAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotnetAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("DotnetAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirtName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e756c817-bcb7-47b2-8e7b-52a6b3065cf4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df0e7052-1ff9-424f-9a41-f41aea8d81f9",
                            Email = "teddy@teddymo.co.za",
                            EmailConfirmed = true,
                            FirtName = "Teddy",
                            LastName = "Morwasetla",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEDDY@TEDDYMO.CO.ZA",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEA4FSe7E/i4/NYOMh/tbXOSAUGaUtWHCRv7IFxkNkArq29nNzmfEw/SXpRZLZkavOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48abea62-775b-416b-a6c4-f6cfa2dc6732",
                            TwoFactorEnabled = false,
                            UserName = "teddymo"
                        });
                });

            modelBuilder.Entity("DotnetAPI.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DotnetAPI.Models.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54d46c47-3d47-4716-891e-ca84d8d38ffc"),
                            Company = "JHnet",
                            Description = "<ul class=\"mt-3\"><li>Developed and maintained web applications using C#, ASP.NET MVC, and related technologies.</li><li>Worked on admin and e-commerce websites for South Africa's leading distributor of branded promotional products.</li><li>Designed and implemented Product Information Management (PIM) admin systems to streamline data handling and improve operational efficiency.</li><li>Collaborated with cross-functional teams to gather requirements and deliver scalable software solutions.</li><li>Optimized application performance and resolved technical issues to ensure seamless functionality.</li><li>Contributed to the development of user-centric features and interfaces, enhancing overall user experience.</li></ul>",
                            Duration = "March 2021 - Present (3 years , 11 months)",
                            IsActive = true,
                            JobTitle = "ASP.NET Web Developer",
                            Link = "https://www.jhnet.co.za",
                            Title = "ASP.NET Web Developer"
                        });
                });

            modelBuilder.Entity("DotnetAPI.Models.ExperienceResponsibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("ExperienceResponsibilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35e831bf-6e69-499d-b850-ebefda79b61d"),
                            Description = "Working on a team to develop a fully functional e-commerce platform for a leading distributor of branded promotional products.",
                            ExperienceId = new Guid("54d46c47-3d47-4716-891e-ca84d8d38ffc"),
                            Technologies = "C#,ASP.NET MVC,SQL Server,JavaScript",
                            Title = "E-commerce Website"
                        },
                        new
                        {
                            Id = new Guid("ffd2db4e-270f-4dc4-a885-0f3b8c49e920"),
                            Description = "Implemented a PIM admin system to streamline data handling and improve operational efficiency.",
                            ExperienceId = new Guid("54d46c47-3d47-4716-891e-ca84d8d38ffc"),
                            Technologies = "C#,ASP.NET MVC,SQL Server,RESTful APIs",
                            Title = "Product Information Management (PIM) System"
                        },
                        new
                        {
                            Id = new Guid("e5849100-e49c-4ca2-ae29-bd8382deb522"),
                            Description = "Built a user-friendly customer portal for managing orders, tracking shipments, and accessing support resources.",
                            ExperienceId = new Guid("54d46c47-3d47-4716-891e-ca84d8d38ffc"),
                            Technologies = "C#,ASP.NET Core,React,SQL Server",
                            Title = "Customer Portal"
                        });
                });

            modelBuilder.Entity("DotnetAPI.Models.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f904c68b-c351-401f-8338-2d75cb7bbbb5"),
                            Description = "The application allows users to explore various Bible translations in one centralized location with intuitive navigation and search functionality.",
                            ImageUrl = "path/to/image.jpg",
                            IsActive = true,
                            Link = "https://github.com/yourusername/giwu-website",
                            Summary = "An interactive web application that displays multiple versions of the Bible. Built using React.js for user interface and Laravel 11 for backend development, providing a responsive and accessible platform.",
                            Technologies = "React.js,Laravel 11",
                            Title = "Giwu Bible Website"
                        },
                        new
                        {
                            Id = new Guid("24cc3959-e5b5-4194-bc88-0d698e3faa1d"),
                            Description = "The app provides offline capabilities and multi-language support for easy accessibility while reading the Bible.",
                            ImageUrl = "path/to/mobliee.jpg",
                            IsActive = true,
                            Link = "https://github.com/yourusername/giwu-mobile",
                            Summary = "A mobile-friendly application that enables users to access the Bible on their smartphones. Built using Flutter, ensuring cross-platform compatibility and real-time updates.",
                            Technologies = "Flutter",
                            Title = "Giwu Bible Mobile App"
                        },
                        new
                        {
                            Id = new Guid("54f12588-0ade-49e2-99c7-803917a6d313"),
                            Description = "The website provides insights into my skills, projects, and experience with full-stack web development.",
                            ImageUrl = "path/to/image.jpg",
                            IsActive = true,
                            Link = "https://yourusername portfolio website",
                            Summary = "A professional portfolio website showcasing your work and personal projects. Built using React.js for the frontend and Laravel 11 for backend development to ensure a clean, user-friendly interface.",
                            Technologies = "React.js,Laravel 11",
                            Title = "Portfolio Website"
                        },
                        new
                        {
                            Id = new Guid("95060d0e-a3ea-4ec2-8248-7510bd9d985b"),
                            Description = "The app integrates with the web interface, allowing real-time updates and notifications for contact management.",
                            ImageUrl = "path/to/image.jpg",
                            IsActive = true,
                            Link = "https://github.com/yourusername/portfolio-app",
                            Summary = "A backend service that provides notifications for contacts and updates to your portfolio. Built using Flutter to ensure cross-platform functionality.",
                            Technologies = "Flutter",
                            Title = "Portfolio App"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8d04dce2-969a-435d-bba4-df3f325983dc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e756c817-bcb7-47b2-8e7b-52a6b3065cf4",
                            RoleId = "8d04dce2-969a-435d-bba4-df3f325983dc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DotnetAPI.Models.ExperienceResponsibility", b =>
                {
                    b.HasOne("DotnetAPI.Models.Experience", "Experience")
                        .WithMany("Responsibilities")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DotnetAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DotnetAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DotnetAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetAPI.Models.Experience", b =>
                {
                    b.Navigation("Responsibilities");
                });
#pragma warning restore 612, 618
        }
    }
}
